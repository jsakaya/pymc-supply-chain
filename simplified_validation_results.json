{
  "base_normal": {
    "model": "base_normal",
    "basic_functionality": {
      "model": "base_normal",
      "model_fits": true,
      "can_forecast": false,
      "forecast_error": "shape mismatch: objects cannot be broadcast to a single shape.  Mismatch is between arg 0 with shape (80,) and arg 1 with shape (20,).\nApply node that caused the error: normal_rv{\"(),()->()\"}(RNG(<Generator(PCG64) at 0x1125D57E0>), MakeVector{dtype='int64'}.0, Composite{(i2 + (i0 * i1) + i3)}.0, ExpandDims{axis=0}.0)\nToposort index: 6\nInputs types: [RandomGeneratorType, TensorType(int64, shape=(1,)), TensorType(float64, shape=(None,)), TensorType(float64, shape=(1,))]\nInputs shapes: ['No shapes', (1,), (20,), (1,)]\nInputs strides: ['No strides', (8,), (8,), (8,)]\nInputs values: [Generator(PCG64) at 0x1125D57E0, array([80]), 'not shown', array([2.19291388])]\nOutputs clients: [[output[1](normal_rv{\"(),()->()\"}.0)], [output[0](demand)]]\n\nBacktrace when the node is created (use PyTensor flag traceback__limit=N to make it longer):\n  File \"/Users/sakaya/projects/pymc-marketing/pymc-supply-chain/test_statistical_validation_simple.py\", line 413, in main\n    results = validator.run_simplified_validation()\n  File \"/Users/sakaya/projects/pymc-marketing/pymc-supply-chain/test_statistical_validation_simple.py\", line 331, in run_simplified_validation\n    basic_results = self.test_basic_model_functionality(model, data, model_name)\n  File \"/Users/sakaya/projects/pymc-marketing/pymc-supply-chain/test_statistical_validation_simple.py\", line 62, in test_basic_model_functionality\n    model.fit(train_data, draws=100, tune=100, chains=1)  # Minimal sampling\n  File \"/Users/sakaya/projects/pymc-marketing/pymc-supply-chain/pymc_supply_chain/base.py\", line 84, in fit\n    self._model = self.build_model(X, y)\n  File \"/Users/sakaya/projects/pymc-marketing/pymc-supply-chain/pymc_supply_chain/demand/base.py\", line 222, in build_model\n    pm.Normal(\n  File \"/Users/sakaya/projects/pymc-marketing/pymc-supply-chain/venv/lib/python3.13/site-packages/pymc/distributions/distribution.py\", line 529, in __new__\n    rv_out = cls.dist(*args, **kwargs)\n  File \"/Users/sakaya/projects/pymc-marketing/pymc-supply-chain/venv/lib/python3.13/site-packages/pymc/distributions/continuous.py\", line 491, in dist\n    return super().dist([mu, sigma], **kwargs)\n  File \"/Users/sakaya/projects/pymc-marketing/pymc-supply-chain/venv/lib/python3.13/site-packages/pymc/distributions/distribution.py\", line 598, in dist\n    return cls.rv_op(*dist_params, size=create_size, **kwargs)\n\nHINT: Use the PyTensor flag `exception_verbosity=high` for a debug print-out and storage map footprint of this Apply node."
    },
    "overall_success": false
  },
  "base_negative_binomial": {
    "model": "base_negative_binomial",
    "basic_functionality": {
      "model": "base_negative_binomial",
      "model_fits": true,
      "can_forecast": false,
      "forecast_error": "size does not match the broadcast shape of the parameters. (np.int64(80),), (np.int64(80),), (20,)\nApply node that caused the error: negative_binomial_rv{\"(),()->()\"}(RNG(<Generator(PCG64) at 0x112BACF20>), MakeVector{dtype='int64'}.0, ExpandDims{axis=0}.0, Composite{(i4 / (exp((i2 + (i0 * i1) + i3)) + i4))}.0)\nToposort index: 6\nInputs types: [RandomGeneratorType, TensorType(int64, shape=(1,)), TensorType(float64, shape=(1,)), TensorType(float64, shape=(None,))]\nInputs shapes: ['No shapes', (1,), (1,), (20,)]\nInputs strides: ['No strides', (8,), (8,), (8,)]\nInputs values: [Generator(PCG64) at 0x112BACF20, array([80]), array([20.18485143]), 'not shown']\nOutputs clients: [[output[1](negative_binomial_rv{\"(),()->()\"}.0)], [output[0](demand)]]\n\nBacktrace when the node is created (use PyTensor flag traceback__limit=N to make it longer):\n  File \"/Users/sakaya/projects/pymc-marketing/pymc-supply-chain/test_statistical_validation_simple.py\", line 331, in run_simplified_validation\n    basic_results = self.test_basic_model_functionality(model, data, model_name)\n  File \"/Users/sakaya/projects/pymc-marketing/pymc-supply-chain/test_statistical_validation_simple.py\", line 62, in test_basic_model_functionality\n    model.fit(train_data, draws=100, tune=100, chains=1)  # Minimal sampling\n  File \"/Users/sakaya/projects/pymc-marketing/pymc-supply-chain/pymc_supply_chain/base.py\", line 84, in fit\n    self._model = self.build_model(X, y)\n  File \"/Users/sakaya/projects/pymc-marketing/pymc-supply-chain/pymc_supply_chain/demand/base.py\", line 188, in build_model\n    pm.NegativeBinomial(\n  File \"/Users/sakaya/projects/pymc-marketing/pymc-supply-chain/venv/lib/python3.13/site-packages/pymc/distributions/distribution.py\", line 657, in __new__\n    return super().__new__(cls, name, *args, **kwargs)\n  File \"/Users/sakaya/projects/pymc-marketing/pymc-supply-chain/venv/lib/python3.13/site-packages/pymc/distributions/distribution.py\", line 529, in __new__\n    rv_out = cls.dist(*args, **kwargs)\n  File \"/Users/sakaya/projects/pymc-marketing/pymc-supply-chain/venv/lib/python3.13/site-packages/pymc/distributions/discrete.py\", line 684, in dist\n    return super().dist([n, p], *args, **kwargs)\n  File \"/Users/sakaya/projects/pymc-marketing/pymc-supply-chain/venv/lib/python3.13/site-packages/pymc/distributions/distribution.py\", line 598, in dist\n    return cls.rv_op(*dist_params, size=create_size, **kwargs)\n\nHINT: Use the PyTensor flag `exception_verbosity=high` for a debug print-out and storage map footprint of this Apply node."
    },
    "overall_success": false
  },
  "base_poisson": {
    "model": "base_poisson",
    "basic_functionality": {
      "model": "base_poisson",
      "model_fits": true,
      "can_forecast": false,
      "forecast_error": "shape mismatch: objects cannot be broadcast to a single shape.  Mismatch is between arg 0 with shape (80,) and arg 1 with shape (20,).\nApply node that caused the error: poisson_rv{\"()->()\"}(RNG(<Generator(PCG64) at 0x1130B7A00>), MakeVector{dtype='int64'}.0, Composite{exp((i2 + (i0 * i1) + i3))}.0)\nToposort index: 5\nInputs types: [RandomGeneratorType, TensorType(int64, shape=(1,)), TensorType(float64, shape=(None,))]\nInputs shapes: ['No shapes', (1,), (20,)]\nInputs strides: ['No strides', (8,), (8,)]\nInputs values: [Generator(PCG64) at 0x1130B7A00, array([80]), 'not shown']\nOutputs clients: [[output[1](poisson_rv{\"()->()\"}.0)], [output[0](demand)]]\n\nBacktrace when the node is created (use PyTensor flag traceback__limit=N to make it longer):\n  File \"/Users/sakaya/projects/pymc-marketing/pymc-supply-chain/test_statistical_validation_simple.py\", line 331, in run_simplified_validation\n    basic_results = self.test_basic_model_functionality(model, data, model_name)\n  File \"/Users/sakaya/projects/pymc-marketing/pymc-supply-chain/test_statistical_validation_simple.py\", line 62, in test_basic_model_functionality\n    model.fit(train_data, draws=100, tune=100, chains=1)  # Minimal sampling\n  File \"/Users/sakaya/projects/pymc-marketing/pymc-supply-chain/pymc_supply_chain/base.py\", line 84, in fit\n    self._model = self.build_model(X, y)\n  File \"/Users/sakaya/projects/pymc-marketing/pymc-supply-chain/pymc_supply_chain/demand/base.py\", line 200, in build_model\n    pm.Poisson(\n  File \"/Users/sakaya/projects/pymc-marketing/pymc-supply-chain/venv/lib/python3.13/site-packages/pymc/distributions/distribution.py\", line 657, in __new__\n    return super().__new__(cls, name, *args, **kwargs)\n  File \"/Users/sakaya/projects/pymc-marketing/pymc-supply-chain/venv/lib/python3.13/site-packages/pymc/distributions/distribution.py\", line 529, in __new__\n    rv_out = cls.dist(*args, **kwargs)\n  File \"/Users/sakaya/projects/pymc-marketing/pymc-supply-chain/venv/lib/python3.13/site-packages/pymc/distributions/discrete.py\", line 558, in dist\n    return super().dist([mu], *args, **kwargs)\n  File \"/Users/sakaya/projects/pymc-marketing/pymc-supply-chain/venv/lib/python3.13/site-packages/pymc/distributions/distribution.py\", line 598, in dist\n    return cls.rv_op(*dist_params, size=create_size, **kwargs)\n\nHINT: Use the PyTensor flag `exception_verbosity=high` for a debug print-out and storage map footprint of this Apply node."
    },
    "overall_success": false
  },
  "base_gamma": {
    "model": "base_gamma",
    "basic_functionality": {
      "model": "base_gamma",
      "model_fits": true,
      "can_forecast": false,
      "forecast_error": "shape mismatch: objects cannot be broadcast to a single shape.  Mismatch is between arg 0 with shape (80,) and arg 1 with shape (20,).\nApply node that caused the error: gamma_rv{\"(),()->()\"}(RNG(<Generator(PCG64) at 0x113822420>), MakeVector{dtype='int64'}.0, Composite{...}.1, Composite{...}.0)\nToposort index: 8\nInputs types: [RandomGeneratorType, TensorType(int64, shape=(1,)), TensorType(float64, shape=(None,)), TensorType(float64, shape=(None,))]\nInputs shapes: ['No shapes', (1,), (20,), (20,)]\nInputs strides: ['No strides', (8,), (8,), (8,)]\nInputs values: [Generator(PCG64) at 0x113822420, array([80]), 'not shown', 'not shown']\nOutputs clients: [[output[1](gamma_rv{\"(),()->()\"}.0)], [output[0](demand)]]\n\nBacktrace when the node is created (use PyTensor flag traceback__limit=N to make it longer):\n  File \"/Users/sakaya/projects/pymc-marketing/pymc-supply-chain/test_statistical_validation_simple.py\", line 413, in main\n    results = validator.run_simplified_validation()\n  File \"/Users/sakaya/projects/pymc-marketing/pymc-supply-chain/test_statistical_validation_simple.py\", line 331, in run_simplified_validation\n    basic_results = self.test_basic_model_functionality(model, data, model_name)\n  File \"/Users/sakaya/projects/pymc-marketing/pymc-supply-chain/test_statistical_validation_simple.py\", line 62, in test_basic_model_functionality\n    model.fit(train_data, draws=100, tune=100, chains=1)  # Minimal sampling\n  File \"/Users/sakaya/projects/pymc-marketing/pymc-supply-chain/pymc_supply_chain/base.py\", line 84, in fit\n    self._model = self.build_model(X, y)\n  File \"/Users/sakaya/projects/pymc-marketing/pymc-supply-chain/pymc_supply_chain/demand/base.py\", line 212, in build_model\n    pm.Gamma(\n  File \"/Users/sakaya/projects/pymc-marketing/pymc-supply-chain/venv/lib/python3.13/site-packages/pymc/distributions/distribution.py\", line 529, in __new__\n    rv_out = cls.dist(*args, **kwargs)\n  File \"/Users/sakaya/projects/pymc-marketing/pymc-supply-chain/venv/lib/python3.13/site-packages/pymc/distributions/continuous.py\", line 2366, in dist\n    return super().dist([alpha, scale], **kwargs)\n  File \"/Users/sakaya/projects/pymc-marketing/pymc-supply-chain/venv/lib/python3.13/site-packages/pymc/distributions/distribution.py\", line 598, in dist\n    return cls.rv_op(*dist_params, size=create_size, **kwargs)\n\nHINT: Use the PyTensor flag `exception_verbosity=high` for a debug print-out and storage map footprint of this Apply node."
    },
    "overall_success": false
  }
}